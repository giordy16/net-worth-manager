// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/obox/asset_category_obox.dart';
import 'models/obox/asset_obox.dart';
import 'models/obox/asset_time_value_obox.dart';
import 'models/obox/currency_obox.dart';
import 'models/obox/settings_obox.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5752538443591479641),
      name: 'Asset',
      lastPropertyId: const obx_int.IdUid(4, 2895973193217761142),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 686168950868258357),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4717379943827412629),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2895973193217761142),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 3614055108786807235),
            relationTarget: 'AssetCategory')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5025912373576431052),
            name: 'timeValues',
            targetId: const obx_int.IdUid(2, 5774523459121135065))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5774523459121135065),
      name: 'AssetTimeValue',
      lastPropertyId: const obx_int.IdUid(4, 361863719230552945),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1953156713904020152),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5079446069413038468),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8208308989681609768),
            name: 'value',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5063528831981583014),
      name: 'Currency',
      lastPropertyId: const obx_int.IdUid(3, 2624238715781977762),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1195285227236435395),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2401489970416036806),
            name: 'symbol',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2624238715781977762),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2570730951224252477),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(2, 5480335002937288467),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2222159246792824370),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5480335002937288467),
            name: 'defaultCurrencyId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 1017344453847331655),
            relationTarget: 'Currency')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2023862010308675343),
      name: 'AssetCategory',
      lastPropertyId: const obx_int.IdUid(2, 1593285745965078837),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2470572836724285790),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1593285745965078837),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2023862010308675343),
      lastIndexId: const obx_int.IdUid(3, 3614055108786807235),
      lastRelationId: const obx_int.IdUid(1, 5025912373576431052),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [2499048142769230001],
      retiredPropertyUids: const [4756937149803909478, 361863719230552945],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Asset: obx_int.EntityDefinition<Asset>(
        model: _entities[0],
        toOneRelations: (Asset object) => [object.category],
        toManyRelations: (Asset object) =>
            {obx_int.RelInfo<Asset>.toMany(1, object.id): object.timeValues},
        getId: (Asset object) => object.id,
        setId: (Asset object, int id) {
          object.id = id;
        },
        objectToFB: (Asset object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(3, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Asset(nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.category.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Asset>(object.timeValues,
              store, obx_int.RelInfo<Asset>.toMany(1, object.id));
          return object;
        }),
    AssetTimeValue: obx_int.EntityDefinition<AssetTimeValue>(
        model: _entities[1],
        toOneRelations: (AssetTimeValue object) => [],
        toManyRelations: (AssetTimeValue object) => {},
        getId: (AssetTimeValue object) => object.id,
        setId: (AssetTimeValue object, int id) {
          object.id = id;
        },
        objectToFB: (AssetTimeValue object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = AssetTimeValue(dateParam, valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Currency: obx_int.EntityDefinition<Currency>(
        model: _entities[2],
        toOneRelations: (Currency object) => [],
        toManyRelations: (Currency object) => {},
        getId: (Currency object) => object.id,
        setId: (Currency object, int id) {
          object.id = id;
        },
        objectToFB: (Currency object, fb.Builder fbb) {
          final symbolOffset = fbb.writeString(object.symbol);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, symbolOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final symbolParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Currency(symbolParam, nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[3],
        toOneRelations: (Settings object) => [object.defaultCurrency],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.defaultCurrency.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Settings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.defaultCurrency.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.defaultCurrency.attach(store);
          return object;
        }),
    AssetCategory: obx_int.EntityDefinition<AssetCategory>(
        model: _entities[4],
        toOneRelations: (AssetCategory object) => [],
        toManyRelations: (AssetCategory object) => {},
        getId: (AssetCategory object) => object.id,
        setId: (AssetCategory object, int id) {
          object.id = id;
        },
        objectToFB: (AssetCategory object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = AssetCategory(nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Asset] entity fields to define ObjectBox queries.
class Asset_ {
  /// see [Asset.id]
  static final id = obx.QueryIntegerProperty<Asset>(_entities[0].properties[0]);

  /// see [Asset.name]
  static final name =
      obx.QueryStringProperty<Asset>(_entities[0].properties[1]);

  /// see [Asset.category]
  static final category =
      obx.QueryRelationToOne<Asset, AssetCategory>(_entities[0].properties[2]);

  /// see [Asset.timeValues]
  static final timeValues =
      obx.QueryRelationToMany<Asset, AssetTimeValue>(_entities[0].relations[0]);
}

/// [AssetTimeValue] entity fields to define ObjectBox queries.
class AssetTimeValue_ {
  /// see [AssetTimeValue.id]
  static final id =
      obx.QueryIntegerProperty<AssetTimeValue>(_entities[1].properties[0]);

  /// see [AssetTimeValue.date]
  static final date =
      obx.QueryDateProperty<AssetTimeValue>(_entities[1].properties[1]);

  /// see [AssetTimeValue.value]
  static final value =
      obx.QueryDoubleProperty<AssetTimeValue>(_entities[1].properties[2]);
}

/// [Currency] entity fields to define ObjectBox queries.
class Currency_ {
  /// see [Currency.id]
  static final id =
      obx.QueryIntegerProperty<Currency>(_entities[2].properties[0]);

  /// see [Currency.symbol]
  static final symbol =
      obx.QueryStringProperty<Currency>(_entities[2].properties[1]);

  /// see [Currency.name]
  static final name =
      obx.QueryStringProperty<Currency>(_entities[2].properties[2]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// see [Settings.id]
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[0]);

  /// see [Settings.defaultCurrency]
  static final defaultCurrency =
      obx.QueryRelationToOne<Settings, Currency>(_entities[3].properties[1]);
}

/// [AssetCategory] entity fields to define ObjectBox queries.
class AssetCategory_ {
  /// see [AssetCategory.id]
  static final id =
      obx.QueryIntegerProperty<AssetCategory>(_entities[4].properties[0]);

  /// see [AssetCategory.name]
  static final name =
      obx.QueryStringProperty<AssetCategory>(_entities[4].properties[1]);
}
